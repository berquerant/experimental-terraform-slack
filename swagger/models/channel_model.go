// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChannelModel channel model
//
// swagger:model ChannelModel
type ChannelModel struct {
	BaseModel

	// channel
	// Required: true
	Channel *Channel `json:"channel"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ChannelModel) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 BaseModel
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.BaseModel = aO0

	// AO1
	var dataAO1 struct {
		Channel *Channel `json:"channel"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Channel = dataAO1.Channel

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ChannelModel) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.BaseModel)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Channel *Channel `json:"channel"`
	}

	dataAO1.Channel = m.Channel

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this channel model
func (m *ChannelModel) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BaseModel
	if err := m.BaseModel.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChannelModel) validateChannel(formats strfmt.Registry) error {

	if err := validate.Required("channel", "body", m.Channel); err != nil {
		return err
	}

	if m.Channel != nil {
		if err := m.Channel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("channel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("channel")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this channel model based on the context it is used
func (m *ChannelModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BaseModel
	if err := m.BaseModel.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChannel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChannelModel) contextValidateChannel(ctx context.Context, formats strfmt.Registry) error {

	if m.Channel != nil {

		if err := m.Channel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("channel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("channel")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChannelModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChannelModel) UnmarshalBinary(b []byte) error {
	var res ChannelModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
