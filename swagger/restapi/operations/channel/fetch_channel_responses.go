// Code generated by go-swagger; DO NOT EDIT.

package channel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/berquerant/terraform-slack/swagger/models"
)

// FetchChannelOKCode is the HTTP code returned for type FetchChannelOK
const FetchChannelOKCode int = 200

/*
FetchChannelOK Success

swagger:response fetchChannelOK
*/
type FetchChannelOK struct {

	/*
	  In: Body
	*/
	Payload *models.ChannelModel `json:"body,omitempty"`
}

// NewFetchChannelOK creates FetchChannelOK with default headers values
func NewFetchChannelOK() *FetchChannelOK {

	return &FetchChannelOK{}
}

// WithPayload adds the payload to the fetch channel o k response
func (o *FetchChannelOK) WithPayload(payload *models.ChannelModel) *FetchChannelOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the fetch channel o k response
func (o *FetchChannelOK) SetPayload(payload *models.ChannelModel) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FetchChannelOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
FetchChannelDefault Error

swagger:response fetchChannelDefault
*/
type FetchChannelDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.ErrorModel `json:"body,omitempty"`
}

// NewFetchChannelDefault creates FetchChannelDefault with default headers values
func NewFetchChannelDefault(code int) *FetchChannelDefault {
	if code <= 0 {
		code = 500
	}

	return &FetchChannelDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the fetch channel default response
func (o *FetchChannelDefault) WithStatusCode(code int) *FetchChannelDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the fetch channel default response
func (o *FetchChannelDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the fetch channel default response
func (o *FetchChannelDefault) WithPayload(payload *models.ErrorModel) *FetchChannelDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the fetch channel default response
func (o *FetchChannelDefault) SetPayload(payload *models.ErrorModel) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FetchChannelDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
