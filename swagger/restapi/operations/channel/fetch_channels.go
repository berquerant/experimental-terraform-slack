// Code generated by go-swagger; DO NOT EDIT.

package channel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/berquerant/terraform-slack/swagger/models"
)

// FetchChannelsHandlerFunc turns a function with the right signature into a fetch channels handler
type FetchChannelsHandlerFunc func(FetchChannelsParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn FetchChannelsHandlerFunc) Handle(params FetchChannelsParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// FetchChannelsHandler interface for that can handle valid fetch channels params
type FetchChannelsHandler interface {
	Handle(FetchChannelsParams, *models.Principal) middleware.Responder
}

// NewFetchChannels creates a new http.Handler for the fetch channels operation
func NewFetchChannels(ctx *middleware.Context, handler FetchChannelsHandler) *FetchChannels {
	return &FetchChannels{Context: ctx, Handler: handler}
}

/*
	FetchChannels swagger:route GET /channels channel fetchChannels

Fetch all channels
*/
type FetchChannels struct {
	Context *middleware.Context
	Handler FetchChannelsHandler
}

func (o *FetchChannels) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewFetchChannelsParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
