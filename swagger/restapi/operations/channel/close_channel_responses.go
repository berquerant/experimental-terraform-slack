// Code generated by go-swagger; DO NOT EDIT.

package channel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/berquerant/terraform-slack/swagger/models"
)

// CloseChannelOKCode is the HTTP code returned for type CloseChannelOK
const CloseChannelOKCode int = 200

/*
CloseChannelOK Success

swagger:response closeChannelOK
*/
type CloseChannelOK struct {

	/*
	  In: Body
	*/
	Payload *CloseChannelOKBody `json:"body,omitempty"`
}

// NewCloseChannelOK creates CloseChannelOK with default headers values
func NewCloseChannelOK() *CloseChannelOK {

	return &CloseChannelOK{}
}

// WithPayload adds the payload to the close channel o k response
func (o *CloseChannelOK) WithPayload(payload *CloseChannelOKBody) *CloseChannelOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the close channel o k response
func (o *CloseChannelOK) SetPayload(payload *CloseChannelOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CloseChannelOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
CloseChannelDefault Error

swagger:response closeChannelDefault
*/
type CloseChannelDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.ErrorModel `json:"body,omitempty"`
}

// NewCloseChannelDefault creates CloseChannelDefault with default headers values
func NewCloseChannelDefault(code int) *CloseChannelDefault {
	if code <= 0 {
		code = 500
	}

	return &CloseChannelDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the close channel default response
func (o *CloseChannelDefault) WithStatusCode(code int) *CloseChannelDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the close channel default response
func (o *CloseChannelDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the close channel default response
func (o *CloseChannelDefault) WithPayload(payload *models.ErrorModel) *CloseChannelDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the close channel default response
func (o *CloseChannelDefault) SetPayload(payload *models.ErrorModel) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CloseChannelDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
