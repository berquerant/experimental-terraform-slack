// Code generated by go-swagger; DO NOT EDIT.

package channel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/berquerant/terraform-slack/swagger/models"
)

// UpdateChannelReader is a Reader for the UpdateChannel structure.
type UpdateChannelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateChannelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateChannelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewUpdateChannelDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateChannelOK creates a UpdateChannelOK with default headers values
func NewUpdateChannelOK() *UpdateChannelOK {
	return &UpdateChannelOK{}
}

/*
UpdateChannelOK describes a response with status code 200, with default header values.

Success
*/
type UpdateChannelOK struct {
	Payload *models.ChannelModel
}

// IsSuccess returns true when this update channel o k response has a 2xx status code
func (o *UpdateChannelOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update channel o k response has a 3xx status code
func (o *UpdateChannelOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update channel o k response has a 4xx status code
func (o *UpdateChannelOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update channel o k response has a 5xx status code
func (o *UpdateChannelOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update channel o k response a status code equal to that given
func (o *UpdateChannelOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update channel o k response
func (o *UpdateChannelOK) Code() int {
	return 200
}

func (o *UpdateChannelOK) Error() string {
	return fmt.Sprintf("[PUT /channel][%d] updateChannelOK  %+v", 200, o.Payload)
}

func (o *UpdateChannelOK) String() string {
	return fmt.Sprintf("[PUT /channel][%d] updateChannelOK  %+v", 200, o.Payload)
}

func (o *UpdateChannelOK) GetPayload() *models.ChannelModel {
	return o.Payload
}

func (o *UpdateChannelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ChannelModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateChannelDefault creates a UpdateChannelDefault with default headers values
func NewUpdateChannelDefault(code int) *UpdateChannelDefault {
	return &UpdateChannelDefault{
		_statusCode: code,
	}
}

/*
UpdateChannelDefault describes a response with status code -1, with default header values.

Error
*/
type UpdateChannelDefault struct {
	_statusCode int

	Payload *models.ErrorModel
}

// IsSuccess returns true when this update channel default response has a 2xx status code
func (o *UpdateChannelDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update channel default response has a 3xx status code
func (o *UpdateChannelDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update channel default response has a 4xx status code
func (o *UpdateChannelDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update channel default response has a 5xx status code
func (o *UpdateChannelDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update channel default response a status code equal to that given
func (o *UpdateChannelDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the update channel default response
func (o *UpdateChannelDefault) Code() int {
	return o._statusCode
}

func (o *UpdateChannelDefault) Error() string {
	return fmt.Sprintf("[PUT /channel][%d] updateChannel default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateChannelDefault) String() string {
	return fmt.Sprintf("[PUT /channel][%d] updateChannel default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateChannelDefault) GetPayload() *models.ErrorModel {
	return o.Payload
}

func (o *UpdateChannelDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateChannelBody update channel body
swagger:model UpdateChannelBody
*/
type UpdateChannelBody struct {

	// is archived
	IsArchived bool `json:"isArchived,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this update channel body
func (o *UpdateChannelBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update channel body based on context it is used
func (o *UpdateChannelBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateChannelBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateChannelBody) UnmarshalBinary(b []byte) error {
	var res UpdateChannelBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
