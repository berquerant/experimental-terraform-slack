// Code generated by go-swagger; DO NOT EDIT.

package channel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/berquerant/terraform-slack/swagger/models"
)

// CreateChannelReader is a Reader for the CreateChannel structure.
type CreateChannelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateChannelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateChannelCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewCreateChannelDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateChannelCreated creates a CreateChannelCreated with default headers values
func NewCreateChannelCreated() *CreateChannelCreated {
	return &CreateChannelCreated{}
}

/*
CreateChannelCreated describes a response with status code 201, with default header values.

Success
*/
type CreateChannelCreated struct {
	Payload *models.ChannelModel
}

// IsSuccess returns true when this create channel created response has a 2xx status code
func (o *CreateChannelCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create channel created response has a 3xx status code
func (o *CreateChannelCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create channel created response has a 4xx status code
func (o *CreateChannelCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create channel created response has a 5xx status code
func (o *CreateChannelCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create channel created response a status code equal to that given
func (o *CreateChannelCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create channel created response
func (o *CreateChannelCreated) Code() int {
	return 201
}

func (o *CreateChannelCreated) Error() string {
	return fmt.Sprintf("[POST /channel][%d] createChannelCreated  %+v", 201, o.Payload)
}

func (o *CreateChannelCreated) String() string {
	return fmt.Sprintf("[POST /channel][%d] createChannelCreated  %+v", 201, o.Payload)
}

func (o *CreateChannelCreated) GetPayload() *models.ChannelModel {
	return o.Payload
}

func (o *CreateChannelCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ChannelModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateChannelDefault creates a CreateChannelDefault with default headers values
func NewCreateChannelDefault(code int) *CreateChannelDefault {
	return &CreateChannelDefault{
		_statusCode: code,
	}
}

/*
CreateChannelDefault describes a response with status code -1, with default header values.

Error
*/
type CreateChannelDefault struct {
	_statusCode int

	Payload *models.ErrorModel
}

// IsSuccess returns true when this create channel default response has a 2xx status code
func (o *CreateChannelDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this create channel default response has a 3xx status code
func (o *CreateChannelDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this create channel default response has a 4xx status code
func (o *CreateChannelDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this create channel default response has a 5xx status code
func (o *CreateChannelDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this create channel default response a status code equal to that given
func (o *CreateChannelDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the create channel default response
func (o *CreateChannelDefault) Code() int {
	return o._statusCode
}

func (o *CreateChannelDefault) Error() string {
	return fmt.Sprintf("[POST /channel][%d] createChannel default  %+v", o._statusCode, o.Payload)
}

func (o *CreateChannelDefault) String() string {
	return fmt.Sprintf("[POST /channel][%d] createChannel default  %+v", o._statusCode, o.Payload)
}

func (o *CreateChannelDefault) GetPayload() *models.ErrorModel {
	return o.Payload
}

func (o *CreateChannelDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
CreateChannelBody create channel body
swagger:model CreateChannelBody
*/
type CreateChannelBody struct {

	// is private
	// Required: true
	IsPrivate *bool `json:"isPrivate"`

	// name
	// Required: true
	Name *string `json:"name"`

	// team Id
	// Required: true
	TeamID *string `json:"teamId"`
}

// Validate validates this create channel body
func (o *CreateChannelBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIsPrivate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTeamID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateChannelBody) validateIsPrivate(formats strfmt.Registry) error {

	if err := validate.Required("channel"+"."+"isPrivate", "body", o.IsPrivate); err != nil {
		return err
	}

	return nil
}

func (o *CreateChannelBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("channel"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *CreateChannelBody) validateTeamID(formats strfmt.Registry) error {

	if err := validate.Required("channel"+"."+"teamId", "body", o.TeamID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create channel body based on context it is used
func (o *CreateChannelBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateChannelBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateChannelBody) UnmarshalBinary(b []byte) error {
	var res CreateChannelBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
