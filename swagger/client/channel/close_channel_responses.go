// Code generated by go-swagger; DO NOT EDIT.

package channel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/berquerant/terraform-slack/swagger/models"
)

// CloseChannelReader is a Reader for the CloseChannel structure.
type CloseChannelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CloseChannelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCloseChannelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewCloseChannelDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCloseChannelOK creates a CloseChannelOK with default headers values
func NewCloseChannelOK() *CloseChannelOK {
	return &CloseChannelOK{}
}

/*
CloseChannelOK describes a response with status code 200, with default header values.

Success
*/
type CloseChannelOK struct {
	Payload *CloseChannelOKBody
}

// IsSuccess returns true when this close channel o k response has a 2xx status code
func (o *CloseChannelOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this close channel o k response has a 3xx status code
func (o *CloseChannelOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this close channel o k response has a 4xx status code
func (o *CloseChannelOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this close channel o k response has a 5xx status code
func (o *CloseChannelOK) IsServerError() bool {
	return false
}

// IsCode returns true when this close channel o k response a status code equal to that given
func (o *CloseChannelOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the close channel o k response
func (o *CloseChannelOK) Code() int {
	return 200
}

func (o *CloseChannelOK) Error() string {
	return fmt.Sprintf("[DELETE /channel][%d] closeChannelOK  %+v", 200, o.Payload)
}

func (o *CloseChannelOK) String() string {
	return fmt.Sprintf("[DELETE /channel][%d] closeChannelOK  %+v", 200, o.Payload)
}

func (o *CloseChannelOK) GetPayload() *CloseChannelOKBody {
	return o.Payload
}

func (o *CloseChannelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CloseChannelOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloseChannelDefault creates a CloseChannelDefault with default headers values
func NewCloseChannelDefault(code int) *CloseChannelDefault {
	return &CloseChannelDefault{
		_statusCode: code,
	}
}

/*
CloseChannelDefault describes a response with status code -1, with default header values.

Error
*/
type CloseChannelDefault struct {
	_statusCode int

	Payload *models.ErrorModel
}

// IsSuccess returns true when this close channel default response has a 2xx status code
func (o *CloseChannelDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this close channel default response has a 3xx status code
func (o *CloseChannelDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this close channel default response has a 4xx status code
func (o *CloseChannelDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this close channel default response has a 5xx status code
func (o *CloseChannelDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this close channel default response a status code equal to that given
func (o *CloseChannelDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the close channel default response
func (o *CloseChannelDefault) Code() int {
	return o._statusCode
}

func (o *CloseChannelDefault) Error() string {
	return fmt.Sprintf("[DELETE /channel][%d] closeChannel default  %+v", o._statusCode, o.Payload)
}

func (o *CloseChannelDefault) String() string {
	return fmt.Sprintf("[DELETE /channel][%d] closeChannel default  %+v", o._statusCode, o.Payload)
}

func (o *CloseChannelDefault) GetPayload() *models.ErrorModel {
	return o.Payload
}

func (o *CloseChannelDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
CloseChannelOKBody close channel o k body
swagger:model CloseChannelOKBody
*/
type CloseChannelOKBody struct {
	models.BaseModel

	// already closed
	AlreadyClosed bool `json:"alreadyClosed,omitempty"`

	// noop
	Noop bool `json:"noop,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *CloseChannelOKBody) UnmarshalJSON(raw []byte) error {
	// CloseChannelOKBodyAO0
	var closeChannelOKBodyAO0 models.BaseModel
	if err := swag.ReadJSON(raw, &closeChannelOKBodyAO0); err != nil {
		return err
	}
	o.BaseModel = closeChannelOKBodyAO0

	// CloseChannelOKBodyAO1
	var dataCloseChannelOKBodyAO1 struct {
		AlreadyClosed bool `json:"alreadyClosed,omitempty"`

		Noop bool `json:"noop,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataCloseChannelOKBodyAO1); err != nil {
		return err
	}

	o.AlreadyClosed = dataCloseChannelOKBodyAO1.AlreadyClosed

	o.Noop = dataCloseChannelOKBodyAO1.Noop

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o CloseChannelOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	closeChannelOKBodyAO0, err := swag.WriteJSON(o.BaseModel)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, closeChannelOKBodyAO0)
	var dataCloseChannelOKBodyAO1 struct {
		AlreadyClosed bool `json:"alreadyClosed,omitempty"`

		Noop bool `json:"noop,omitempty"`
	}

	dataCloseChannelOKBodyAO1.AlreadyClosed = o.AlreadyClosed

	dataCloseChannelOKBodyAO1.Noop = o.Noop

	jsonDataCloseChannelOKBodyAO1, errCloseChannelOKBodyAO1 := swag.WriteJSON(dataCloseChannelOKBodyAO1)
	if errCloseChannelOKBodyAO1 != nil {
		return nil, errCloseChannelOKBodyAO1
	}
	_parts = append(_parts, jsonDataCloseChannelOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this close channel o k body
func (o *CloseChannelOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.BaseModel
	if err := o.BaseModel.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this close channel o k body based on the context it is used
func (o *CloseChannelOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.BaseModel
	if err := o.BaseModel.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *CloseChannelOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CloseChannelOKBody) UnmarshalBinary(b []byte) error {
	var res CloseChannelOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
