// Code generated by go-swagger; DO NOT EDIT.

package health

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/berquerant/terraform-slack/swagger/models"
)

// CheckAliveReader is a Reader for the CheckAlive structure.
type CheckAliveReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CheckAliveReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCheckAliveOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[GET /health] checkAlive", response, response.Code())
	}
}

// NewCheckAliveOK creates a CheckAliveOK with default headers values
func NewCheckAliveOK() *CheckAliveOK {
	return &CheckAliveOK{}
}

/*
CheckAliveOK describes a response with status code 200, with default header values.

Alive
*/
type CheckAliveOK struct {
	Payload *models.HealthModel
}

// IsSuccess returns true when this check alive o k response has a 2xx status code
func (o *CheckAliveOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this check alive o k response has a 3xx status code
func (o *CheckAliveOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this check alive o k response has a 4xx status code
func (o *CheckAliveOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this check alive o k response has a 5xx status code
func (o *CheckAliveOK) IsServerError() bool {
	return false
}

// IsCode returns true when this check alive o k response a status code equal to that given
func (o *CheckAliveOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the check alive o k response
func (o *CheckAliveOK) Code() int {
	return 200
}

func (o *CheckAliveOK) Error() string {
	return fmt.Sprintf("[GET /health][%d] checkAliveOK  %+v", 200, o.Payload)
}

func (o *CheckAliveOK) String() string {
	return fmt.Sprintf("[GET /health][%d] checkAliveOK  %+v", 200, o.Payload)
}

func (o *CheckAliveOK) GetPayload() *models.HealthModel {
	return o.Payload
}

func (o *CheckAliveOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HealthModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
